<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <!--http://tengj.top/2017/04/05/springboot7/ 文档位置-->
    <!--
        scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->

    <contextName>logback</contextName>
    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。
    一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。-->
    <property name="log.path" value="D:\\log" />
    <!--用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
    通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。-->


    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
         </filter>-->
        <!--用ThresholdFilter来过滤掉ERROR级别以下的日志-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>


    <!--输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <!--随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：
    rollingPolicy的定义，上例中<fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式,把每一天的日志归档到一个文件中，
    <maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。
    可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。
    <totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。
    如果你想把日志直接放到当前项目下，把${log.path}/去掉即可。
    -->

    <root level="info">
        <appender-ref ref="console" />
        <!-- <appender-ref ref="file" /> -->
    </root>
    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个logger。-->


    <!--<logger name="com.mybatis.controller"/>-->
    <!--将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”；
    没有设置addtivity，默认为true，将此logger的打印信息向上级传递；
    没有设置appender，此logger本身不打印任何信息。
    <root level="info">将root的打印级别设置为“info”，指定了名字为“console”的appender。
    当执行com.mybatis.controller.LearnController类的login方法时，LearnController 在包com.mybatis.controller中，
    所以首先执行<logger name="com.dudu.controller"/>，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；
    root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；-->


    <!--<logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
    name:用来指定受此logger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
    addtivity:是否向上级logger传递打印信息。默认是true。-->
    <logger name="com.cn.hnust.controller.CourseMapperAnnotationController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>
    <!--控制com.dudu.controller.LearnController类的日志打印，打印级别为“WARN”;additivity属性为false，表示此logger的打印信息不再向上级传递;
    指定了名字为“console”的appender;这时候执行com.dudu.controller.LearnController类的login方法时，
    先执行<logger name="com.mybatis.controller.Tcontroller" level="WARN" additivity="false">,
    将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息。
    当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次-->


</configuration>